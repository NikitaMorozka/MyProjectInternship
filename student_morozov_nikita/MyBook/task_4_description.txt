**Контекст задачи (краткое описание) **

1) Почему команда Gradle build работает "из коробки" (по дефолту)?

Откуда он знает где в проекте лежит продакшн код, а где лежат тесты?

Попробуйте узнать больше о том зачем была создана
и применяется такая структура проекта в современной разработке.

**Что было сделано и как? (краткое описание)**
2) Гугл и GPT помог мне быстро разобраться в теме

**Зачем это было сделано? Чему научился в процессе выполнения задания?**

3) Наш проект использует так называемую Maven структуру проекта.
Эта структура называется так, потому что она впервые появилась
и использовалась в проектах под управлением Build Tool Maven.

Структура Maven проекта, как идея понравилась большенству. Это было удачным решением по причине
ее простоты с точки зрения единого, понятного подхода к структуре проекта,
это освобождает разработчика от создания кастомной конфигурации.
Maven структура обеспечивает единый подход к организации файлов. Независимо от команды или проекта
разработчики могут легко ориентироваться в структуре:
- src/main/java - Java продакшн код (классы), основой код
- src/test/java - тесты написанные на Java

Инструменты Gradle или Maven, знают
эту структуру изначально, поэтому сборка, тестирование и упаковка выполняются из коробки.
Например:

Gradle автоматически понимает, где лежит код для компиляции (src/main/java) и тесты (src/test/java).
Файлы ресурсов из src/main/resources и src/test/resources добавляются к соответствующим классам.

Разделение ответственности
Продакшн-код (src/main) изолирован от тестового кода (src/test), что помогает избежать путаницы.
Тестовые файлы ресурсов и основные ресурсы также хранятся отдельно, чтобы не смешивать данные.

Поддержка модульности и масштабируемости
Данную структуру можно и нужно использовать для создания других модулей.
Код легко разносится по своим местам, сохраняя единый стандарт для всех модулей.

**Сколько потратил времени на выполнение задачи?**

4) 15 минут

**Заметки, идеи, предложения в свободной форме**

5) Maven структура проекта состоит из:
- src - директория с кодом
- src/main - в директории лежит продакшн код
- src/main/java - Java продакшн код (классы)
- src/main/resources - продакшн файлы ресурсов
- src/test - в директории лежит тестовый код
- src/test/java - тесты написанные на Java
- src/test/resources - тестовые файлы ресурсов