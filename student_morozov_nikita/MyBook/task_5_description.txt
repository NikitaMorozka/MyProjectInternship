**Контекст задачи (краткое описание) **
1) Ознакомиться с сформированным bild файлом после комипляции модуля

**Что было сделано и как? (краткое описание)**
2) Открыл модуль и начал изучать

**Зачем это было сделано? Чему научился в процессе выполнения задания?**

3) Я разобрался для чего нужен JAR файл
Запустил посмотрел тест сформированный в html
Узнал, что такое продакшн классов
Продакшн классы (production classes) — это классы, которые содержат
основной код вашего приложения, то есть код, предназначенный для работы в “боевой” (продакшн) среде.

- classes - тут лежит bytecode откомпилированных классов
- classes/java/main - bytecode продакшн классов
- classes/java/test - bytecode тестовых классов
- generated - тут будет лежать сгенерированный при компиляции код (о нем вы узнаете чуть позже)
- libs - тут лежит собранный из продакшн кода jar файл
- reports - содержит сгенерированный отчет по тестам
- resources - содержит файлы ресурсов используемые приложением (о них вы узнаете чуть позже)
- test-results - содержит результаты выполнения тестов

**Сколько потратил времени на выполнение задачи?**
4) 15 минут

**Заметки, идеи, предложения в свободной форме**

5) JAR (Java ARchive)

JAR-файл представляет собой архив, который содержит скомпилированный код (классы),
ресурсы (например, изображения, файлы конфигураций) и метаинформацию,
что делает его удобным для распространения. Вместо того чтобы раздавать множество отдельных файлов,
вы можете собрать весь проект в один файл, который легко перенести, загрузить или установить.

Когда используется JAR:
	•	Приложения (с GUI или консольные), которые нужно распространять и запускать.
	•	Библиотеки для других проектов.
	•	Плагины для серверов или других приложений.

JAR-файлы широко используются в экосистеме Java и поддерживаются
множеством инструментов (например, в качестве плагинов в веб-серверах или других приложениях).

JAR-файл формируется для упрощения распространения и развертывания
приложения или библиотеки, для уменьшения количества файлов и зависимостей,
а также для обеспечения удобства запуска, безопасности и совместимости с другими инструментами.
