**Контекст задачи (краткое описание) **
1) Разобраться в IoC

**Что было сделано и как? (краткое описание)**
2) -
**Зачем это было сделано? Чему научился в процессе выполнения задания?**
IoC - это принцип проектирования, согласно которому управление созданием и жизненным циклом зависимостей объектов
передается внешнему коду (контейнеру IoC), а не остается внутри самих объектов.

Идея IoC заключается в том, чтобы классы не создавали свои зависимости, а получали их извне.
Это позволяет упростить тестирование, повысить модульность и улучшить читаемость кода.

Существует 3 способа внедрения зависимости:

1) Через конструктор (Constructor Injection) - передача осуществляется через параметр конструктора

ПЛЮСЫ:
1.	Иммутабельность: Все зависимости передаются при создании объекта. После создания объект невозможно изменить.
2.	Обязательные зависимости: Объект нельзя создать без передачи зависимостей, что предотвращает ошибки.
3.	Явность: Легко понять, какие зависимости требуются для объекта, просто посмотрев на конструктор.

МИНУСЫ:
1.	Большие конструкторы: Если у класса много зависимостей, конструктор становится громоздким, что усложняет читаемость.
2.	Неудобство с необязательными зависимостями: Если зависимость не обязательна, приходится писать перегруженные конструкторы или передавать null.
---------------------------------------------------------------
class TravelService {
    private final DateTimeService dateTimeService;

    public TravelService(DateTimeService dateTimeService) {
        this.dateTimeService = dateTimeService;
    }
}
---------------------------------------------------------------

2) Через set-метод (Setter Injection)

Зависимость передается через метод-сеттер после создания объекта.

ПЛЮСЫ:
1.	Удобство для необязательных зависимостей: Необязательные зависимости можно просто не задавать.
2.	Гибкость: Зависимости можно менять в процессе работы объекта (хотя это и спорно).
МИНУСЫ:
1.	Необходимость дополнительной проверки: Может возникнуть ситуация,
когда метод вызывается до установки зависимостей, что приводит к ошибкам.
2.	Мутируемость: Объект можно изменять после создания, что делает его менее предсказуемым.
3.	Скрытость: Труднее понять, какие зависимости требуются объекту, так как это не видно сразу.

---------------------------------------------------------------
class TravelService {
    private DateTimeService dateTimeService;

    public void setDateTimeService(DateTimeService dateTimeService) {
        this.dateTimeService = dateTimeService;
    }
---------------------------------------------------------------
3) Через свойство объекта (Field Injection)
Зависимость внедряется напрямую в поле объекта, обычно с помощью аннотаций (например, @Autowired в Spring).

ПЛЮСЫ:
1.	Простота: Нет необходимости явно прописывать конструкторы или сеттеры.
2.	Минимум кода: Код выглядит компактно.

МИНУСЫ:
1.	Скрытость: Поля внедряются “магически” через контейнер IoC, что затрудняет понимание кода.
2.	Трудность тестирования: Сложнее подменить зависимости при написании юнит-тестов, так как они не передаются явно.
3.	Нарушение принципа инкапсуляции: Поля объекта становятся доступными для контейнера IoC, что идет вразрез с хорошими практиками ООП.
---------------------------------------------------------------
class TravelService {
    @Autowired
    private DateTimeService dateTimeService;
}
---------------------------------------------------------------

Лучший способ зависит от контекста и задач:
Constructor Injection — чаще всего рекомендуется для обязательных зависимостей. Он делает классы иммутабельными и улучшает читаемость кода.
Setter Injection — подходит для необязательных зависимостей, которые можно не задавать сразу.
Field Injection — используется в простых проектах, где важно сократить количество кода,
но на крупных проектах его лучше избегать из-за скрытости и трудностей тестирования.

**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.